// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decode
    Decoder(in=instruction,
	    a=a,
    	    c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6,
	    d1=d1, d2=d2, d3=d3,
	    j1=j1, j2=j2, j3=j3);

    // Define C / A instruction flags
    Not(in=instruction[15], out=isAInst);
    Not(in=isAInst, out=isCInst);

    // Define load A Register flag
    Mux16(a=instruction, b=outALU, sel=isCInst, out=aResInput);
    Or(a=isAInst, b=d1, out=loadARes);

    // Store A
    ARegister(in=aResInput, load=loadARes, out=A);

    // Define A / M
    Mux16(a=A, b=inM, sel=a, out=AorM);

    // ALU Calc
    ALU(x=D, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, zr=zr, ng=ng);

    // Define load D Register flag
    And(a=d2, b=isCInst, out=loadDRes);

    // Store D
    DRegister(in=outALU, load=loadDRes, out=D);

    // Define pg: out>0
    Or(a=ng, b=zr, out=le);
    Not(in=le, out=pg);

    // Eval jump condition
    And(a=j1, b=ng, out=isNg);
    And(a=j2, b=zr, out=isZr);
    And(a=j3, b=pg, out=isPg);

    DMux8Way(in=true, sel[0]=isPg, sel[1]=isZr, sel[2]=isNg,
    		      a=null, b=isJGT, c=isJEQ, d=isJGE, e=isJLT, f=isJNE, g=isJLE, h=isJMP);

    Or8Way(in[0]=false, in[1]=isJGT, in[2]=isJEQ, in[3]=isJGE,
    	   in[4]=isJLT, in[5]=isJNE, in[6]=isJLE, in[7]=isJMP,
	   out=isJmp);

    // Don't jump with A instruction
    And(a=isJmp, b=isCInst, out=loadPC);
    Not(in=loadPC, out=inc);

    // Update PC
    PC(in=A, inc=inc, load=loadPC, reset=reset, out[0..14]=pc);

    // Set Outputs
    And16(a=A, b=A, out[0..14]=addressM);
    And16(a=outALU, b=outALU, out=outM);
    And(a=d3, b=isCInst, out=writeM);
}